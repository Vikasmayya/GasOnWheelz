{"version":3,"sources":["Alerts.js","admin/RefillOrders.js"],"names":["Alerts","props","alert","className","type","role","id","style","textTransform","msg","RefillOrders","phone","useParams","useState","INBookings","setINBookings","Bookings","setBookings","history","useHistory","alerts","setAlerts","Inalerts","setInAlerts","useEffect","getPostFromFirebase","firebaseData","firestore","collection","where","orderBy","onSnapshot","querySnapshot","empty","setTimeout","forEach","doc","push","data","key","e","getPostFromFbase","padding","backgroundColor","color","borderColor","scope","map","post","name","gas_cylinder_type","quantity","price","booked_on","amount","amountr","pending_amount","pending_empty","order_status","Date","seconds","toLocaleDateString","toLocaleTimeString","to"],"mappings":"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","file":"static/js/19.faf091a4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Alerts = (props) => {\r\n    \r\n  return (\r\n    props.alert &&  <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" id=\"alerts\">\r\n                    <strong style={{textTransform:\"capitalize\"}}>{props.alert.msg}</strong>\r\n                    </div>\r\n  )\r\n}\r\n\r\nexport default Alerts;","import React, { useEffect, useState } from 'react';\r\nimport { useParams,useHistory } from 'react-router-dom';\r\nimport { Link } from 'react-router-dom';\r\nimport Alerts from '../Alerts';\r\nimport { firestore } from '../Firebase';\r\n\r\nconst RefillOrders = () => {\r\n    const {phone} = useParams();\r\n    const [INBookings, setINBookings] =useState([]);\r\n    const [Bookings, setBookings] =useState([]);\r\n    let history = useHistory();\r\n    \r\n    const [alerts, setAlerts] = useState(null);\r\n    const [Inalerts, setInAlerts] = useState(null);\r\n    const showAlert = (msg, type) =>{\r\n    setAlerts({\r\n        msg: msg,\r\n        type:type,\r\n    })\r\n    setTimeout(() => {\r\n      setAlerts(null);\r\n    }, 5000);\r\n    }\r\n    const showInAlert = (msg, type) =>{\r\n      setInAlerts({\r\n          msg: msg,\r\n          type:type,\r\n      })\r\n      setTimeout(() => {\r\n        setInAlerts(null);\r\n      }, 7000);\r\n      }\r\n\r\n    useEffect(() =>{\r\n      try {\r\n        const getPostFromFirebase = [];\r\n          const firebaseData = firestore.collection(\"Sales\")\r\n          .where('phone', '==',phone)\r\n          .where('order_status', '==','INCOMPLETE')\r\n          .where('order_type', '==','REFILL')\r\n          .orderBy(\"booked_on\",\"desc\")\r\n          .onSnapshot((querySnapshot) =>{\r\n            if(!querySnapshot.empty){\r\n              querySnapshot.forEach( doc => {\r\n                getPostFromFirebase.push({...doc.data(), key: doc.id,});\r\n            });\r\n            setINBookings(getPostFromFirebase);\r\n            }else{    \r\n              showInAlert(\"CONGRATS! There doesn't exists any INCOMPLETE Orders from this Customer.\",\"info\") \r\n         }\r\n          });\r\n          return () => firebaseData();\r\n      } catch(e) {\r\n        history.push(\"/Registration\");\r\n      } }, [phone, history]);\r\n      \r\n      useEffect(() =>{\r\n        try {\r\n          const getPostFromFbase = [];\r\n            const firebaseData = firestore.collection(\"Sales\")\r\n            .where('phone', '==',phone)\r\n            .where('order_status', '==','COMPLETE')\r\n            .where('order_type', '==','REFILL')\r\n            .orderBy(\"booked_on\",\"desc\")\r\n            .onSnapshot((querySnapshot) =>{\r\n              if(!querySnapshot.empty){\r\n                querySnapshot.forEach( doc => {\r\n                  getPostFromFbase.push({...doc.data(), key: doc.id,});\r\n              });\r\n              setBookings(getPostFromFbase);\r\n              }else{        \r\n                showAlert(\"Sorry!There doesn't exists any COMPLETE Orders  from this Customer.\",\"danger\") \r\n              }\r\n            });\r\n            return () => firebaseData();\r\n        } catch(e) {\r\n          history.push(\"/Registration\");\r\n        } }, [phone, history]);\r\n    \r\n\r\n    return (\r\n        <>\r\n          <div className=\"alert-container\">\r\n          <Alerts alert={Inalerts} />\r\n          <Alerts alert={alerts} />\r\n          </div>\r\n          <div className=\"my-2\">\r\n                <h4 className=\"text-center\">Customer's INCOMPLETE Orders - Refill</h4>\r\n          </div>\r\n          <div className=\"table-responsive\" style={{padding:\"20px\"}}>\r\n           <table className=\"table table-borderless\" >\r\n            <thead className=\"thead-dark\" style={{backgroundColor : \"#c50c0c\" , color: \"white\",borderColor: \"black\"}}>\r\n            <tr>\r\n                {/* <th scope=\"col\">Customer's Name</th>\r\n                <th scope=\"col\">Phone Number</th> */}\r\n                <th scope=\"col\">Cylinder Type</th>\r\n                <th scope=\"col\">Full</th>\r\n                <th scope=\"col\">Empty</th>\r\n                <th scope=\"col\">Price</th>\r\n                <th scope=\"col\">Total Amount</th>\r\n                <th scope=\"col\">Amount Recieved</th>\r\n                <th scope=\"col\">Pending Amount</th>\r\n                <th scope=\"col\">Pending Empty(s)</th>\r\n                <th scope=\"col\">Booked On</th>\r\n                <th scope=\"col\">Action</th>\r\n                {/* <th scope=\"col\">booked_by</th> */}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n           {\r\n               INBookings.map((post) => {\r\n                 const { key, name, gas_cylinder_type, quantity, empty, price, booked_on, amount, amountr, pending_amount, pending_empty,order_status } = post; \r\n               return(\r\n                <tr key={key} style={{backgroundColor:\"white\" }}>\r\n                    {/* <td>{name}</td>\r\n                    <td>{phone}</td> */}\r\n                    <td>{gas_cylinder_type}</td>\r\n                    <td>{quantity}</td>\r\n                    <td>{empty}</td>\r\n                    <td>{price}</td>\r\n                    <td>{amount}</td>\r\n                    <td>{amountr}</td>\r\n                    <td>{pending_amount}</td>\r\n                    <td>{pending_empty}</td>\r\n                    <td>{new Date(booked_on.seconds * 1000).toLocaleDateString(\"en-UK\")+ \" at \"+new Date(booked_on.seconds * 1000).toLocaleTimeString() }</td>\r\n                    <td>\r\n                     <Link to={`/EditBooking/${phone}/${gas_cylinder_type}/${price}/${name}/${key}/${quantity}/${empty}/${amountr}/${order_status}`} className=\"btn btn-primary\">\r\n                          Edit\r\n                     </Link>\r\n                    </td>\r\n                    </tr>\r\n               )\r\n            })\r\n           }\r\n           </tbody>\r\n           </table>\r\n          </div>\r\n          <div className=\"my-2\">\r\n                <h4 className=\"text-center\">Customer's COMPLETE Orders - Refill</h4>\r\n          </div>\r\n          <div className=\"table-responsive\" style={{padding:\"20px\"}}>\r\n           <table className=\"table table-borderless\">\r\n            <thead className=\"thead-dark\" style={{backgroundColor : \"grey\" , color: \"white\",borderColor: \"black\"}}>\r\n            <tr>\r\n                {/* <th scope=\"col\">Customer's Name</th>\r\n                <th scope=\"col\">Phone Number</th> */}\r\n                <th scope=\"col\">Cylinder Type</th>\r\n                <th scope=\"col\">Full</th>\r\n                <th scope=\"col\">Empty</th>\r\n                <th scope=\"col\">Price</th>\r\n                <th scope=\"col\">Total Amount</th>\r\n                <th scope=\"col\">Amount Recieved</th>\r\n                <th scope=\"col\">Pending Amount</th>\r\n                <th scope=\"col\">Pending Empty(s)</th>\r\n                <th scope=\"col\">Booked On</th>\r\n                {/* <th scope=\"col\">booked_by</th> */}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n           {\r\n               Bookings.map((post) => {\r\n                 const { key, gas_cylinder_type, quantity, empty, price, booked_on, amount, amountr, pending_amount, pending_empty } = post; \r\n               return(\r\n                <tr key={key} style={{backgroundColor:\"white\" }}>\r\n                    {/* <td>{name}</td>\r\n                    <td>{phone}</td> */}\r\n                    <td>{gas_cylinder_type}</td>\r\n                    <td>{quantity}</td>\r\n                    <td>{empty}</td>\r\n                    <td>{price}</td>\r\n                    <td>{amount}</td>\r\n                    <td>{amountr}</td>\r\n                    <td>{pending_amount}</td>\r\n                    <td>{pending_empty}</td>\r\n                    <td>{new Date(booked_on.seconds * 1000).toLocaleDateString(\"en-UK\")+ \" at \"+new Date(booked_on.seconds * 1000).toLocaleTimeString() }</td>\r\n                    </tr>\r\n               )\r\n            })\r\n           }\r\n           </tbody>\r\n           </table>\r\n          </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default RefillOrders;"],"sourceRoot":""}